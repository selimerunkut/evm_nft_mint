pragma solidity >=0.6.0 <=0.8.4;
//SPDX-License-Identifier: MIT

import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol";
import "./ERC2981ContractWideRoyalties.sol";

//learn more: https://docs.openzeppelin.com/contracts/3.x/erc721

// GET LISTED ON OPENSEA: https://testnets.opensea.io/get-listed/step-two

contract YourCollectible is
    ERC721PresetMinterPauserAutoId,
    ERC721URIStorage,
    ERC2981ContractWideRoyalties,
    Ownable
{
    address public mintFundsReceiver;

    uint256 public constant limit = 10;
    uint256 public requested;
    uint256 public mintPrice;
    string private _baseTokenURI;

    using Counters for Counters.Counter;
    Counters.Counter private _tokenIds;

    constructor(
        string memory name,
        string memory symbol,
        string memory baseTokenURI
    ) ERC721PresetMinterPauserAutoId(name, symbol, baseTokenURI) {}

    /// @inheritdoc ERC721
    function _baseURI()
        internal
        view
        virtual
        override(ERC721, ERC721PresetMinterPauserAutoId)
        returns (string memory)
    {
        return _baseTokenURI;
    }

    /// returns the base URI
    function getBaseURI() external view returns (string memory) {
        return _baseTokenURI;
    }

    /// @inheritdoc ERC721
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual override(ERC721, ERC721PresetMinterPauserAutoId) {
        super._beforeTokenTransfer(from, to, tokenId);
    }

    function _burn(uint256 tokenId)
        internal
        override(ERC721, ERC721URIStorage)
    {
        ERC721URIStorage._burn(tokenId);
    }

    /// @inheritdoc IERC721Metadata
    function tokenURI(uint256 tokenId)
        public
        view
        virtual
        override(ERC721URIStorage, ERC721)
        returns (string memory)
    {
        return ERC721URIStorage.tokenURI(tokenId);
    }

    /// @inheritdoc	ERC165
    function supportsInterface(bytes4 interfaceId)
        public
        view
        virtual
        override(ERC721, ERC721PresetMinterPauserAutoId, ERC2981Base)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }

    /// @notice Allows to set the royalties on the contract
    /// @dev This function in a real contract should be protected with a onlyOwner (or equivalent) modifier
    /// @param recipient the royalties recipient
    /// @param value royalties value (between 0 and 10000)
    function setRoyalties(address recipient, uint256 value) public {
        _setRoyalties(recipient, value);
    }

    // mint a NFT
    function mintItem(address to, string memory tokenUri)
        public
        onlyOwner
        returns (uint256)
    {
        require(_tokenIds.current() < limit, "DONE MINTING");
        _tokenIds.increment();

        uint256 id = _tokenIds.current();
        _mint(to, id);
        _setTokenURI(id, tokenUri);

        return id;
    }

    /// set the mint price
    function setMintFundsReceiver(address newMintFundsReceiver) public onlyOwner {
        mintFundsReceiver = newMintFundsReceiver;
    }

    function setMintPrice(uint256 newMintPrice) public onlyOwner {
        mintPrice = newMintPrice;
    }

    event Request(address to, uint256 value);

    /// transfer payed funds from minter to funds receiver
    /// create request for minting
    function requestMint() public payable {
        require(requested++ < limit, "Minting Limit reached");
        require(msg.value >= mintPrice, "mint price to low");
        (bool success, ) = mintFundsReceiver.call{value: msg.value}("");
        require(success, "could not send");
        emit Request(msg.sender, msg.value);
    }
}
